service cloud.firestore {
  match /databases/{database}/documents {
  
  	// lock everything by default
  	match /{document=**} {
			allow read, write: if false;
  	}
    
    // Users with 'Admin' role can do everything
    match /users/{userId} {
    
      // User can only create its own record with 'User' role
      allow create: if (isOwner(userId) && request.resource.data.role == 'User') || isOneOfRoles(['Admin']);

      // User can only read its own record
    	allow read: if isOwner(userId) || isOneOfRoles(['Admin']);

      // User can only update its own record while not changing the role
      allow update: if (isOwner(userId) && request.resource.data.role == resource.data.role) || isOneOfRoles(['Admin']);

      // User can only delete its own record
      allow delete: if isOwner(userId) || isOneOfRoles(['Admin']);


      match /medals/{gymId} {
        // User can create new gym badges
        allow create: if isOwner(userId) || isOneOfRoles(['Admin']);

        // Every User can read all users badges
        allow read: if isAuthenticated() && userExists();

        // User can only update its own badges
        allow update: if isOwner(userId) || isOneOfRoles(['Admin']);

        // User can only delete its own record
        allow delete: if isOwner(userId) || isOneOfRoles(['Admin']);
      }
    }
  
  	match /gyms/{gym} {  
    	allow read: if isOneOfRoles(['Subscriber', 'Admin']);
      allow write: if isOneOfRoles(['Admin']);
  	}
    
    match /quests/{quest} {     
    	allow read: if isOneOfRoles(['Subscriber', 'Admin']);
      allow write: if isOneOfRoles(['Admin']);
  	}
    
    // check if role of an authenticated user is one of "rolesArray"
    function isOneOfRoles(rolesArray) {
    	return isAuthenticated() && userExists() && (getUserData().role in rolesArray);
    }
   
   	// prevent null error if not authenticated
    function isAuthenticated() {
    	return request.auth != null && request.auth.uid != null;
		}
    
    // get data for authenticated user
    function getUserData() {
  		return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
		}

    function userExists() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function isOwner(userId) {
    	return isAuthenticated() && request.auth.uid == userId;
    }  
 
  }
}